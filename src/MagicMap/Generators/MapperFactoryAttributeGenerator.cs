// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MapperFactoryAttributeGenerator.cs" company="consolovers">
//   Copyright (c) daniel bramer 2022 - 2023
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace MagicMap.Generators;

using System;

using Microsoft.CodeAnalysis;

/// <summary>Attribute that identifies property with different names on the left and right object</summary>
internal class MapperFactoryAttributeGenerator
{
   #region Constructors and Destructors

   private MapperFactoryAttributeGenerator(INamedTypeSymbol attributeSymbol)
   {
      this.AttributeSymbol = attributeSymbol ?? throw new ArgumentNullException(nameof(attributeSymbol));
   }

   #endregion

   #region Public Properties

   public static string Code { get; } = @"//------------------------------------------------
// <auto-generated>
//     Generated by the MagicMap source generator
// </auto-generated>
//------------------------------------------------
namespace MagicMap 
{
   [global::System.Runtime.CompilerServices.CompilerGenerated]
   [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = false, Inherited = false)]
   /// <summary>Attribute that can be used to specify a static method as factory method for a mapper type</summary>
   internal sealed class MapperFactoryAttribute : global::System.Attribute
   {
      public MapperFactoryAttribute()
      {
      }
   }
}
";

   /// <summary>Gets the attribute symbol.</summary>
   public INamedTypeSymbol AttributeSymbol { get; }

   #endregion

   #region Properties

   internal static string MapperFactoryAttributeName => "MagicMap.MapperFactoryAttribute";

   #endregion

   #region Methods

   internal static MapperFactoryAttributeGenerator FromCompilation(Compilation compilation)
   {
      var attributeType = compilation.GetTypeByMetadataName(MapperFactoryAttributeName);
      if (attributeType == null)
         throw new InvalidOperationException($"The source generator should have generated the type {MapperFactoryAttributeName} before");

      return new MapperFactoryAttributeGenerator(attributeType);
   }

   #endregion
}