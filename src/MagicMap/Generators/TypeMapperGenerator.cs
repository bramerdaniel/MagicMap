// --------------------------------------------------------------------------------------------------------------------
// <copyright file="TypeMapperGenerator.cs" company="consolovers">
//   Copyright (c) daniel bramer 2022 - 2023
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace MagicMap.Generators;

using System;
using System.Text;

using Microsoft.CodeAnalysis;

internal class TypeMapperGenerator : IMagicGenerator
{
   private readonly ITypeMapperContext context;

   public TypeMapperGenerator(ITypeMapperContext context)
   {
      this.context = context ?? throw new ArgumentNullException(nameof(context));

   }

   public GeneratedSource Generate()
   {
      var builder = new StringBuilder();
      builder.AppendLine("// <auto-generated>");

      if (!context.MapperType.ContainingNamespace.IsGlobalNamespace)
      {
         builder.AppendLine($"namespace {context.MapperType.ContainingNamespace.ToDisplayString()}");
         builder.AppendLine("{");
      }

      builder.AppendLine($"   partial class {context.MapperType.Name}");
      builder.AppendLine("   {");
      builder.AppendLine("      // Here we generate the mapping logic");
      AppendMapperSignature(builder);
      builder.AppendLine("      {");
      builder.AppendLine("      }");
      builder.AppendLine("");
      builder.AppendLine("   }");

      if (!context.MapperType.ContainingNamespace.IsGlobalNamespace)
         builder.AppendLine("}");

      var generatedSource = new GeneratedSource
      {
         Name = context.MapperType.Name + ".generated.cs",
         Code = builder.ToString()
      };

      return generatedSource;
   }

   private void AppendMapperSignature(StringBuilder builder)
   {
      builder.Append("public void Map(");
      builder.Append(context.LeftType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat));
      builder.Append( " left");
      builder.Append( ", ");
      builder.Append(context.RightType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat));
      builder.Append(" right");
      builder.AppendLine(")");
   }
}